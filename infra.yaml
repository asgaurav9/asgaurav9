AWSTemplateFormatVersion: '2010-09-09'
Description: Application infrastructure - EC2, RDS, ALB, ASG

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id from networking stack
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 1 Id
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 2 Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet 1 Id
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet 2 Id
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access
  AmiId:
    Type: String
    Description: AMI ID with WordPress installed

Resources:

  # IAM Role for EC2 instance (attach policies to allow S3 and RDS access)
  WordpressInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  WordpressInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WordpressInstanceRole

  # Security Group for ALB
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP from internet to ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group for EC2 Instances (Allow HTTP from ALB only)
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB only
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  # Security Group for RDS
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from EC2 instances only
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref Ec2SecurityGroup

  # RDS Subnet Group (private subnets only)
  WordpressDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for WordPress RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDS Instance (Multi-AZ enabled)
  WordpressRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: wordpress-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: admin
      MasterUserPassword: YourSecurePassword123!  # Replace or use Secrets Manager
      MultiAZ: true
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      DBSubnetGroupName: !Ref WordpressDbSubnetGroup

  # Read Replica of RDS in different AZ
  WordpressReadReplica:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref WordpressRDS
      DBInstanceClass: db.t3.micro
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref WordpressDbSubnetGroup
      MultiAZ: false

  # ALB
  WordpressALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: wordpress-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup

  WordpressTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      Matcher:
        HttpCode: 200

  WordpressListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WordpressALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressTargetGroup

  # Launch Template for ASG
  WordpressLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: wordpress-launch-template
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref Ec2SecurityGroup
        IamInstanceProfile:
          Name: !Ref WordpressInstanceProfile
        UserData: !Base64 |
          #!/bin/bash
          # UserData optional, leave blank if AMI ready

  # Auto Scaling Group
  WordpressAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: wordpress-asg
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WordpressLaunchTemplate
        Version: !GetAtt WordpressLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref WordpressTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  # Scaling Policy: Scale out when CPU > 70%
  CpuScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WordpressAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      Cooldown: 300
      ScalingAdjustment: 1

  CpuScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WordpressAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      Cooldown: 300
      ScalingAdjustment: -1

  # CloudWatch Alarms for Scaling

  CpuHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU > 70%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WordpressAutoScalingGroup
      AlarmActions:
        - !Ref CpuScaleOutPolicy

  CpuLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU < 25%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WordpressAutoScalingGroup
      AlarmActions:
        - !Ref CpuScaleInPolicy

Outputs:
  ALBDNSName:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt WordpressALB.DNSName
